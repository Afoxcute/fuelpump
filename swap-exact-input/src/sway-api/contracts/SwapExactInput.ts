/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
  Forc version: 0.60.0
  Fuel-Core version: 0.26.0
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum, Vec } from "./common";

export enum InputErrorInput { RouteTooShort = 'RouteTooShort' };
export enum InputErrorOutput { RouteTooShort = 'RouteTooShort' };
export type SwapErrorInput = Enum<{ ExcessiveSlippage: BigNumberish, PairExchangeNotRegistered: [AssetIdInput, AssetIdInput] }>;
export type SwapErrorOutput = Enum<{ ExcessiveSlippage: BN, PairExchangeNotRegistered: [AssetIdOutput, AssetIdOutput] }>;

export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;

export type SwapExactInputConfigurables = Partial<{
  AMM_ID: string;
}>;

const abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "(_, _)",
      "components": [
        {
          "name": "__tuple_element",
          "type": 8,
          "typeArguments": null
        },
        {
          "name": "__tuple_element",
          "type": 8,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "enum InputError",
      "components": [
        {
          "name": "RouteTooShort",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "enum Option",
      "components": [
        {
          "name": "None",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Some",
          "type": 6,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        6
      ]
    },
    {
      "typeId": 5,
      "type": "enum SwapError",
      "components": [
        {
          "name": "ExcessiveSlippage",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "PairExchangeNotRegistered",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "generic T",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "raw untyped ptr",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 8,
      "type": "struct AssetId",
      "components": [
        {
          "name": "bits",
          "type": 2,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 9,
      "type": "struct RawVec",
      "components": [
        {
          "name": "ptr",
          "type": 7,
          "typeArguments": null
        },
        {
          "name": "cap",
          "type": 11,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        6
      ]
    },
    {
      "typeId": 10,
      "type": "struct Vec",
      "components": [
        {
          "name": "buf",
          "type": 9,
          "typeArguments": [
            {
              "name": "",
              "type": 6,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "len",
          "type": 11,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        6
      ]
    },
    {
      "typeId": 11,
      "type": "u64",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "assets",
          "type": 10,
          "typeArguments": [
            {
              "name": "",
              "type": 8,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "input_amount",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "minimum_output_amount",
          "type": 4,
          "typeArguments": [
            {
              "name": "",
              "type": 11,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "deadline",
          "type": 11,
          "typeArguments": null
        }
      ],
      "name": "main",
      "output": {
        "name": "",
        "type": 11,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Swaps assets along a route by specifying exact input for each swap."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `assets`: [Vec<AssetId>] - The assets along the swap route."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `input_amount`: [u64] - The desired amount of the input asset."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `minimum_output_amount`: [u64] - The maximum amount of the output asset."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `deadline`: [u64] - The limit on block height for operation."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * The amount of the output asset."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When `assets.len()` is less than two."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the exchange contract has not been registered in the AMM."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the amount of the brought asset is less than `minimum_output_amount`."
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "17871718070013141034",
      "loggedType": {
        "name": "",
        "type": 3,
        "typeArguments": []
      }
    },
    {
      "logId": "13312657215918348615",
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_ID",
      "configurableType": {
        "name": "",
        "type": 2,
        "typeArguments": null
      },
      "offset": 8008
    }
  ]
};

const storageSlots: StorageSlot[] = [];

export class SwapExactInputInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    main: FunctionFragment;
  };
}

export class SwapExactInput extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: SwapExactInputInterface;
  declare functions: {
    main: InvokeFunction<[assets: Vec<AssetIdInput>, input_amount: BigNumberish, minimum_output_amount: Option<BigNumberish>, deadline: BigNumberish], BN>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
