/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
  Forc version: 0.60.0
  Fuel-Core version: 0.26.0
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export enum InitErrorInput { AssetPairAlreadySet = 'AssetPairAlreadySet', AssetPairNotSet = 'AssetPairNotSet', IdenticalAssets = 'IdenticalAssets' };
export enum InitErrorOutput { AssetPairAlreadySet = 'AssetPairAlreadySet', AssetPairNotSet = 'AssetPairNotSet', IdenticalAssets = 'IdenticalAssets' };
export type InputErrorInput = Enum<{ CannotAddLessThanMinimumLiquidity: BigNumberish, DeadlinePassed: BigNumberish, ExpectedNonZeroAmount: AssetIdInput, ExpectedNonZeroParameter: AssetIdInput, InvalidAsset: [] }>;
export type InputErrorOutput = Enum<{ CannotAddLessThanMinimumLiquidity: BN, DeadlinePassed: BN, ExpectedNonZeroAmount: AssetIdOutput, ExpectedNonZeroParameter: AssetIdOutput, InvalidAsset: [] }>;
export type TransactionErrorInput = Enum<{ DesiredAmountTooHigh: BigNumberish, DesiredAmountTooLow: BigNumberish, ExpectedNonZeroDeposit: AssetIdInput, InsufficientReserve: AssetIdInput, NoLiquidityToRemove: [] }>;
export type TransactionErrorOutput = Enum<{ DesiredAmountTooHigh: BN, DesiredAmountTooLow: BN, ExpectedNonZeroDeposit: AssetIdOutput, InsufficientReserve: AssetIdOutput, NoLiquidityToRemove: [] }>;

export type AddLiquidityEventInput = { added_assets: AssetPairInput, liquidity: AssetInput };
export type AddLiquidityEventOutput = { added_assets: AssetPairOutput, liquidity: AssetOutput };
export type AssetInput = { id: AssetIdInput, amount: BigNumberish };
export type AssetOutput = { id: AssetIdOutput, amount: BN };
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type AssetPairInput = { a: AssetInput, b: AssetInput };
export type AssetPairOutput = { a: AssetOutput, b: AssetOutput };
export type DefineAssetPairEventInput = { asset_a_id: AssetIdInput, asset_b_id: AssetIdInput };
export type DefineAssetPairEventOutput = { asset_a_id: AssetIdOutput, asset_b_id: AssetIdOutput };
export type DepositEventInput = { deposited_asset: AssetInput, new_balance: BigNumberish };
export type DepositEventOutput = { deposited_asset: AssetOutput, new_balance: BN };
export type PoolInfoInput = { reserves: AssetPairInput, liquidity: BigNumberish };
export type PoolInfoOutput = { reserves: AssetPairOutput, liquidity: BN };
export type PreviewAddLiquidityInfoInput = { other_asset_to_add: AssetInput, liquidity_asset_to_receive: AssetInput };
export type PreviewAddLiquidityInfoOutput = { other_asset_to_add: AssetOutput, liquidity_asset_to_receive: AssetOutput };
export type PreviewSwapInfoInput = { other_asset: AssetInput, sufficient_reserve: boolean };
export type PreviewSwapInfoOutput = { other_asset: AssetOutput, sufficient_reserve: boolean };
export type RemoveLiquidityEventInput = { removed_reserve: AssetPairInput, burned_liquidity: AssetInput };
export type RemoveLiquidityEventOutput = { removed_reserve: AssetPairOutput, burned_liquidity: AssetOutput };
export type RemoveLiquidityInfoInput = { removed_amounts: AssetPairInput, burned_liquidity: AssetInput };
export type RemoveLiquidityInfoOutput = { removed_amounts: AssetPairOutput, burned_liquidity: AssetOutput };
export type SwapEventInput = { input: AssetInput, output: AssetInput };
export type SwapEventOutput = { input: AssetOutput, output: AssetOutput };
export type WithdrawEventInput = { withdrawn_asset: AssetInput, remaining_balance: BigNumberish };
export type WithdrawEventOutput = { withdrawn_asset: AssetOutput, remaining_balance: BN };

export type ExchangeContractConfigurables = Partial<{
  LIQUIDITY_MINER_FEE: BigNumberish;
  MINIMUM_LIQUIDITY: BigNumberish;
}>;

const abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "enum InitError",
      "components": [
        {
          "name": "AssetPairAlreadySet",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "AssetPairNotSet",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "IdenticalAssets",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "enum InputError",
      "components": [
        {
          "name": "CannotAddLessThanMinimumLiquidity",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "DeadlinePassed",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "ExpectedNonZeroAmount",
          "type": 10,
          "typeArguments": null
        },
        {
          "name": "ExpectedNonZeroParameter",
          "type": 10,
          "typeArguments": null
        },
        {
          "name": "InvalidAsset",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "enum Option",
      "components": [
        {
          "name": "None",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Some",
          "type": 7,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        7
      ]
    },
    {
      "typeId": 6,
      "type": "enum TransactionError",
      "components": [
        {
          "name": "DesiredAmountTooHigh",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "DesiredAmountTooLow",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "ExpectedNonZeroDeposit",
          "type": 10,
          "typeArguments": null
        },
        {
          "name": "InsufficientReserve",
          "type": 10,
          "typeArguments": null
        },
        {
          "name": "NoLiquidityToRemove",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "generic T",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 8,
      "type": "struct AddLiquidityEvent",
      "components": [
        {
          "name": "added_assets",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "liquidity",
          "type": 9,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 9,
      "type": "struct Asset",
      "components": [
        {
          "name": "id",
          "type": 10,
          "typeArguments": null
        },
        {
          "name": "amount",
          "type": 21,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 10,
      "type": "struct AssetId",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 11,
      "type": "struct AssetPair",
      "components": [
        {
          "name": "a",
          "type": 9,
          "typeArguments": null
        },
        {
          "name": "b",
          "type": 9,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 12,
      "type": "struct DefineAssetPairEvent",
      "components": [
        {
          "name": "asset_a_id",
          "type": 10,
          "typeArguments": null
        },
        {
          "name": "asset_b_id",
          "type": 10,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 13,
      "type": "struct DepositEvent",
      "components": [
        {
          "name": "deposited_asset",
          "type": 9,
          "typeArguments": null
        },
        {
          "name": "new_balance",
          "type": 21,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 14,
      "type": "struct PoolInfo",
      "components": [
        {
          "name": "reserves",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "liquidity",
          "type": 21,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 15,
      "type": "struct PreviewAddLiquidityInfo",
      "components": [
        {
          "name": "other_asset_to_add",
          "type": 9,
          "typeArguments": null
        },
        {
          "name": "liquidity_asset_to_receive",
          "type": 9,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 16,
      "type": "struct PreviewSwapInfo",
      "components": [
        {
          "name": "other_asset",
          "type": 9,
          "typeArguments": null
        },
        {
          "name": "sufficient_reserve",
          "type": 2,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 17,
      "type": "struct RemoveLiquidityEvent",
      "components": [
        {
          "name": "removed_reserve",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "burned_liquidity",
          "type": 9,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 18,
      "type": "struct RemoveLiquidityInfo",
      "components": [
        {
          "name": "removed_amounts",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "burned_liquidity",
          "type": 9,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 19,
      "type": "struct SwapEvent",
      "components": [
        {
          "name": "input",
          "type": 9,
          "typeArguments": null
        },
        {
          "name": "output",
          "type": 9,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 20,
      "type": "struct WithdrawEvent",
      "components": [
        {
          "name": "withdrawn_asset",
          "type": 9,
          "typeArguments": null
        },
        {
          "name": "remaining_balance",
          "type": 21,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 21,
      "type": "u64",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "desired_liquidity",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "deadline",
          "type": 21,
          "typeArguments": null
        }
      ],
      "name": "add_liquidity",
      "output": {
        "name": "",
        "type": 21,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset_id",
          "type": 10,
          "typeArguments": null
        }
      ],
      "name": "balance",
      "output": {
        "name": "",
        "type": 21,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset_a",
          "type": 10,
          "typeArguments": null
        },
        {
          "name": "asset_b",
          "type": 10,
          "typeArguments": null
        }
      ],
      "name": "constructor",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "deposit",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "pool_info",
      "output": {
        "name": "",
        "type": 14,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "type": 9,
          "typeArguments": null
        }
      ],
      "name": "preview_add_liquidity",
      "output": {
        "name": "",
        "type": 15,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "exact_input_asset",
          "type": 9,
          "typeArguments": null
        }
      ],
      "name": "preview_swap_exact_input",
      "output": {
        "name": "",
        "type": 16,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "exact_output_asset",
          "type": 9,
          "typeArguments": null
        }
      ],
      "name": "preview_swap_exact_output",
      "output": {
        "name": "",
        "type": 16,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "min_asset_a",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "min_asset_b",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "deadline",
          "type": 21,
          "typeArguments": null
        }
      ],
      "name": "remove_liquidity",
      "output": {
        "name": "",
        "type": 18,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "min_output",
          "type": 5,
          "typeArguments": [
            {
              "name": "",
              "type": 21,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "deadline",
          "type": 21,
          "typeArguments": null
        }
      ],
      "name": "swap_exact_input",
      "output": {
        "name": "",
        "type": 21,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "output",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "deadline",
          "type": 21,
          "typeArguments": null
        }
      ],
      "name": "swap_exact_output",
      "output": {
        "name": "",
        "type": 21,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "type": 9,
          "typeArguments": null
        }
      ],
      "name": "withdraw",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "13019369090464841419",
      "loggedType": {
        "name": "",
        "type": 3,
        "typeArguments": []
      }
    },
    {
      "logId": "4976236512326244199",
      "loggedType": {
        "name": "",
        "type": 4,
        "typeArguments": []
      }
    },
    {
      "logId": "17204801759039263145",
      "loggedType": {
        "name": "",
        "type": 6,
        "typeArguments": []
      }
    },
    {
      "logId": "4951180666019619331",
      "loggedType": {
        "name": "",
        "type": 8,
        "typeArguments": []
      }
    },
    {
      "logId": "9022120472644272136",
      "loggedType": {
        "name": "",
        "type": 12,
        "typeArguments": []
      }
    },
    {
      "logId": "12590297951544646752",
      "loggedType": {
        "name": "",
        "type": 13,
        "typeArguments": []
      }
    },
    {
      "logId": "11509934747247895544",
      "loggedType": {
        "name": "",
        "type": 17,
        "typeArguments": []
      }
    },
    {
      "logId": "8823645266456004970",
      "loggedType": {
        "name": "",
        "type": 19,
        "typeArguments": []
      }
    },
    {
      "logId": "10918704871079408520",
      "loggedType": {
        "name": "",
        "type": 20,
        "typeArguments": []
      }
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "LIQUIDITY_MINER_FEE",
      "configurableType": {
        "name": "",
        "type": 21,
        "typeArguments": null
      },
      "offset": 57728
    },
    {
      "name": "MINIMUM_LIQUIDITY",
      "configurableType": {
        "name": "",
        "type": 21,
        "typeArguments": null
      },
      "offset": 57632
    }
  ]
};

const storageSlots: StorageSlot[] = [
  {
    "key": "b48b753af346966d0d169c0b2e3234611f65d5cfdb57c7b6e7cd6ca93707bee0",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "b48b753af346966d0d169c0b2e3234611f65d5cfdb57c7b6e7cd6ca93707bee1",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "b48b753af346966d0d169c0b2e3234611f65d5cfdb57c7b6e7cd6ca93707bee2",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "de9090cb50e71c2588c773487d1da7066d0c719849a7e58dc8b6397a25c567c0",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export class ExchangeContractInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    add_liquidity: FunctionFragment;
    balance: FunctionFragment;
    constructor: FunctionFragment;
    deposit: FunctionFragment;
    pool_info: FunctionFragment;
    preview_add_liquidity: FunctionFragment;
    preview_swap_exact_input: FunctionFragment;
    preview_swap_exact_output: FunctionFragment;
    remove_liquidity: FunctionFragment;
    swap_exact_input: FunctionFragment;
    swap_exact_output: FunctionFragment;
    withdraw: FunctionFragment;
  };
}

export class ExchangeContract extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: ExchangeContractInterface;
  declare functions: {
    add_liquidity: InvokeFunction<[desired_liquidity: BigNumberish, deadline: BigNumberish], BN>;
    balance: InvokeFunction<[asset_id: AssetIdInput], BN>;
    constructor: InvokeFunction<[asset_a: AssetIdInput, asset_b: AssetIdInput], void>;
    deposit: InvokeFunction<[], void>;
    pool_info: InvokeFunction<[], PoolInfoOutput>;
    preview_add_liquidity: InvokeFunction<[asset: AssetInput], PreviewAddLiquidityInfoOutput>;
    preview_swap_exact_input: InvokeFunction<[exact_input_asset: AssetInput], PreviewSwapInfoOutput>;
    preview_swap_exact_output: InvokeFunction<[exact_output_asset: AssetInput], PreviewSwapInfoOutput>;
    remove_liquidity: InvokeFunction<[min_asset_a: BigNumberish, min_asset_b: BigNumberish, deadline: BigNumberish], RemoveLiquidityInfoOutput>;
    swap_exact_input: InvokeFunction<[min_output: Option<BigNumberish>, deadline: BigNumberish], BN>;
    swap_exact_output: InvokeFunction<[output: BigNumberish, deadline: BigNumberish], BN>;
    withdraw: InvokeFunction<[asset: AssetInput], void>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
