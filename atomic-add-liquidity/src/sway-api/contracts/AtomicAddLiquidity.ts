/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
  Forc version: 0.60.0
  Fuel-Core version: 0.26.0
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export enum InputErrorInput { DesiredLiquidityZero = 'DesiredLiquidityZero' };
export enum InputErrorOutput { DesiredLiquidityZero = 'DesiredLiquidityZero' };

export type AssetInput = { id: AssetIdInput, amount: BigNumberish };
export type AssetOutput = { id: AssetIdOutput, amount: BN };
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type AssetPairInput = { a: AssetInput, b: AssetInput };
export type AssetPairOutput = { a: AssetOutput, b: AssetOutput };
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type LiquidityParametersInput = { deposits: AssetPairInput, liquidity: BigNumberish, deadline: BigNumberish };
export type LiquidityParametersOutput = { deposits: AssetPairOutput, liquidity: BN, deadline: BN };

const abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "enum InputError",
      "components": [
        {
          "name": "DesiredLiquidityZero",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "struct Asset",
      "components": [
        {
          "name": "id",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "amount",
          "type": 8,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "struct AssetId",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "struct AssetPair",
      "components": [
        {
          "name": "a",
          "type": 3,
          "typeArguments": null
        },
        {
          "name": "b",
          "type": 3,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "struct ContractId",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "struct LiquidityParameters",
      "components": [
        {
          "name": "deposits",
          "type": 5,
          "typeArguments": null
        },
        {
          "name": "liquidity",
          "type": 8,
          "typeArguments": null
        },
        {
          "name": "deadline",
          "type": 8,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 8,
      "type": "u64",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "exchange_contract_id",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "liquidity_parameters",
          "type": 7,
          "typeArguments": null
        }
      ],
      "name": "main",
      "output": {
        "name": "",
        "type": 8,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Deposits pool assets and adds liquidity to an AMM exchange contract."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `exchange_contract_id`: [ContractId] - The contract id of the exchange."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `liquidity_parameters`: [LiquidityParameters] - Exchange liquidity for a specific asset pair."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * The amount of liquidity assets minted."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When `liquidity_parameters.liquidity` is not greater than zero."
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "17871718070013141034",
      "loggedType": {
        "name": "",
        "type": 2,
        "typeArguments": []
      }
    }
  ],
  "messagesTypes": [],
  "configurables": []
};

const storageSlots: StorageSlot[] = [];

export class AtomicAddLiquidityInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    main: FunctionFragment;
  };
}

export class AtomicAddLiquidity extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: AtomicAddLiquidityInterface;
  declare functions: {
    main: InvokeFunction<[exchange_contract_id: ContractIdInput, liquidity_parameters: LiquidityParametersInput], BN>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
